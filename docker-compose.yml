version: '3.8'

services:
  bot:
    build: ./bot
    container_name: my-bot
    env_file: .env
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - backend

  backend:
    build: ./backend
    env_file: .env
    volumes:
      - media_data:/app/App/media
    networks:
      - app-network
    expose:
      - "8000"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tgShop"]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - media_data:/var/www/media
      - ./nginx/certbot:/var/www/certbot
      - ./nginx/conf.d:/etc/nginx/conf.d
      - certbot_data:/etc/letsencrypt
    container_name: react-nginx
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - backend
    links:
      - backend:backend

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - certbot_data:/etc/letsencrypt
      - ./nginx/certbot:/var/www/certbot
    entrypoint: ["sh", "-c", "sleep 10 && certbot certonly --webroot --webroot-path=/var/www/certbot --email @gmail.com --agree-tos --no-eff-email -d url -d url"]
    restart: on-failure

volumes:
  postgres_data:
  media_data:
  certbot_data:
  certbot_www:

networks:
  app-network:
    driver: bridge